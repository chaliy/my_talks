<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Tutorial1</name></assembly>
<members>
<member name="F:Tutorial.Widget.state">
<summary>
 The internal state of the Widget
</summary>
</member>
<member name="P:Tutorial.Widget.HasBeenPoked">
<summary>
 Has the Widget been poked?
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.Widget">
<summary>
 A widget which counts the number of times it is poked
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Tutorial.Vector2D.Length">
<summary>
 The length of the vector
</summary>
</member>
<member name="P:Tutorial.Vector2D.DY">
<summary>
 The displacement along the Y-axis
</summary>
</member>
<member name="P:Tutorial.Vector2D.DX">
<summary>
 The displacement along the X-axis
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Tutorial.Vector2D">
<summary>
 A 2-dimensional vector
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Tutorial.Square(System.Int32)">
<summary>
 A function that squares its input
</summary>
</member>
<member name="">

</member>
<member name="P:Tutorial.lookupTable">
<summary>
 A dictionary with integer keys and string values
</summary>
</member>
<member name="">

</member>
<member name="P:Tutorial.arrLength">
<summary>
 Compute the length of the array by using an instance method on the array object
</summary>
</member>
<member name="P:Tutorial.arr">
<summary>
 Create an array 
</summary>
</member>
<member name="P:Tutorial.squaresOfOneToTen">
<summary>
 The squares of the first 10 integers
</summary>
</member>
<member name="P:Tutorial.oneToTen">
<summary>
 The list of integers between 1 and 10 inclusive 
</summary>
</member>
<member name="P:Tutorial.listD">
<summary>
 Sum of a list
</summary>
</member>
<member name="M:Tutorial.SumList(Microsoft.FSharp.Collections.FSharpList{System.Int32})">
<summary>
 Compute the sum of a list of integers using a recursive function
</summary>
</member>
<member name="P:Tutorial.listC">
<summary>
 A list with 3 integers, note :: is the &apos;cons&apos; operation
</summary>
</member>
<member name="P:Tutorial.listB">
<summary>
 A list with 3 integers
</summary>
</member>
<member name="M:Tutorial.listA``1">
<summary>
 The empty list
</summary>
</member>
<member name="P:Tutorial.stringD">
<summary>
 &quot;Hello world&quot; computed using a .NET library function
</summary>
</member>
<member name="P:Tutorial.stringC">
<summary>
 &quot;Hello world&quot; computed using string concatentation
</summary>
</member>
<member name="P:Tutorial.stringB">
<summary>
 A second simple string
</summary>
</member>
<member name="P:Tutorial.stringA">
<summary>
 A simple string
</summary>
</member>
<member name="P:Tutorial.boolean3">
<summary>
 Compute a new boolean using ands, ors, and nots
</summary>
</member>
<member name="P:Tutorial.boolean2">
<summary>
 A second simple boolean value
</summary>
</member>
<member name="P:Tutorial.boolean1">
<summary>
 A simple boolean value
</summary>
</member>
<member name="M:Tutorial.Swap``2(``0,``1)">
<summary>
 A function that swaps the order of two values in a tuple
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Tutorial.hcf(System.Int32,System.Int32)">
<summary>
 Compute the highest-common-factor of two integers
</summary>
</member>
<member name="M:Tutorial.factorial(System.Int32)">
<summary>
 Compute the factorial of an integer
</summary>
</member>
<member name="M:Tutorial.increment(System.Int32)">
<summary>
 Another function on integers
</summary>
</member>
<member name="P:Tutorial.result">
<summary>
 The result of a simple computation 
</summary>
</member>
<member name="M:Tutorial.f(System.Int32)">
<summary>
 A function on integers
</summary>
</member>
<member name="P:Tutorial.int3">
<summary>
 Add two integers
</summary>
</member>
<member name="P:Tutorial.int2">
<summary>
 A second very simple constant integer
</summary>
</member>
<member name="P:Tutorial.int1">
<summary>
 A very simple constant integer
</summary>
</member>
<member name="T:Tutorial">

</member>
</members>
</doc>
